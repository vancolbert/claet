.PHONY: clean release
OPTIONS = -DLINUX -D_7ZIP_ST
SUBARCH := $(shell uname -m | sed -e s/i.86/x86/)
ARCH ?= $(SUBARCH)
ifeq ($(ARCH),ppc)
	OPTIONS += -DEL_BIG_ENDIAN
endif
ifeq ($(ARCH),ppc_64)
	OPTIONS += -DEL_BIG_ENDIAN
endif
f := -pipe -fno-strict-aliasing $(OPTIONS) $(shell sdl-config --cflags) $(shell xml2-config --cflags) $(shell pkg-config libpng --cflags) $(EXTRA_INCLUDES)
#warn := -Wall -Werror -Wfatal-errors -Wno-unused-variable -Wno-deprecated-declarations
CFLAGS := -O0 -ggdb $f $(warn)
_CFLAGS := -O3 -fomit-frame-pointer -ffast-math $f
CXXFLAGS := -O0 -ggdb $f $(warn)
_CXXFLAGS := -O3 -fomit-frame-pointer -ffast-math $f
LDFLAGS := $(shell sdl-config --libs) \
	$(shell pkg-config libxml-2.0 --libs) \
	$(shell pkg-config SDL_net --libs) \
	$(shell pkg-config SDL_image --libs) \
	$(shell pkg-config libpng --libs) \
	$(shell pkg-config cal3d --libs) \
	$(shell pkg-config gl --libs) \
	$(shell pkg-config glu --libs) \
	$(shell pkg-config openal --libs) \
	$(shell pkg-config vorbis --libs) \
	$(shell pkg-config vorbisfile --libs) \
	$(shell pkg-config zlib --libs) \
	$(foreach FEATURE, $(FEATURES), $($(FEATURE)_LIBS)) \
	$(shell xslt-config --libs) \
	$(shell pkg-config x11 --libs) -lm -lstdc++
_LDFLAGS=$(XDIR) -lGL -lpthread -lstdc++ -lm -ldl
LIBD=../libs
STATICLIBS=$(LIBD)/libSDL_net.a $(LIBD)/libSDL.a $(LIBD)/libSDL_image.a $(LIBD)/libopenal.a $(LIBD)/libvorbisfile.a $(LIBD)/libvorbis.a $(LIBD)/libogg.a $(LIBD)/libxml2.a $(LIBD)/libcal3d.a $(LIBD)/libpng.a $(LIBD)/libasound.a $(LIBD)/libGLU.a $(LIBD)/libz.a $(EXTRA_STATICLIBS) -lX11
srcdirs := engine exceptions eye_candy fsaa io shader xml xz
csrcs := $(wildcard *.c) $(foreach i,$(srcdirs),$(wildcard $i/*.c))
cxxsrcs := $(wildcard *.cpp) $(foreach i,$(srcdirs),$(wildcard $i/*.cpp))
COBJS := $(csrcs:%.c=%.o)
CXXOBJS := $(cxxsrcs:%.cpp=%.o)
OBJS=$(COBJS) $(CXXOBJS)
HEADER_DIRS = . books eye_candy io pawn fsaa engine xz
DEP_FILES=$(foreach OBJ, $(COBJS), .deps/$(OBJ).P) $(foreach OBJ, $(CXXOBJS), .deps/$(OBJ).P)
EXE=le.$(ARCH).linux.bin
ifndef CC
CC=gcc
endif
ifndef CXX
CXX=g++
endif
ifndef LINK
LINK=gcc
endif
all: $(EXE)
$(EXE): $(OBJS)
	@echo "  LINK $(EXE)"
	$(LINK) $(CFLAGS) -o $(EXE) $(OBJS) $(LDFLAGS)
DEPS_MAGIC := $(shell mkdir .deps .deps/io .deps/shader .deps/eye_candy .deps/exceptions .deps/xz .deps/xml .deps/fsaa .deps/engine > /dev/null 2>&1 || :)
$(COBJS): %.o: %.c
	@echo "  CC   $@"
	if $(CC) $(CFLAGS) -MT '$@' -MD -MP -MF '.deps/$@.pp' -c $< -o $@; then \
		mv ".deps/$@.pp" ".deps/$@.P"; \
	else rm -f ".deps/$@.pp"; exit 1; \
	fi
$(CXXOBJS): %.o: %.cpp
	@echo "  CXX  $@"
	if $(CXX) $(CXXFLAGS) -MT '$@' -MD -MP -MF '.deps/$@.pp' -c $< -o $@; then \
		mv ".deps/$@.pp" ".deps/$@.P"; \
	else rm -f ".deps/$@.pp"; exit 1; \
	fi
release:
	@$(MAKE) -f Makefile.linux 'CFLAGS=$(_CFLAGS)' 'CXXFLAGS=$(_CXXFLAGS)'
static:
	@$(MAKE) -f Makefile.linux 'CFLAGS=$(_CFLAGS)' 'CXXFLAGS=$(_CXXFLAGS)' 'LDFLAGS=$(_LDFLAGS) -lGL' 'OBJS=$(OBJS) $(STATICLIBS)' 'EXE=le.$(ARCH).static.linux.bin'
clean:
	rm -f $(OBJS) $(EXE)
	rm -rf .deps
.depend: $(foreach HEADER_DIR, $(HEADER_DIRS), $(wildcard $(HEADER_DIR)/*.h))
	$(CC) $(CFLAGS) -MM $(patsubst %.o, %.c, $(COBJS)) >.depend
	$(CXX) $(CXXFLAGS) -MM $(patsubst %.o, %.cpp, $(CXXOBJS)) >>.depend
-include $(DEP_FILES)
